@charset "UTF-8";
/*!
 * Hamburgers
 * @description Tasty CSS-animated hamburgers
 * @author Jonathan Suh @jonsuh
 * @site https://jonsuh.com/hamburgers
 * @link https://github.com/jonsuh/hamburgers
 */

// Settings
// ==================================================
$hamburger-padding-x: 0 !default;
$hamburger-padding-y: 0 !default;
$hamburger-layer-width: 20px !default;
$hamburger-layer-height: 2px !default;
$hamburger-layer-spacing: 4px !default;
$hamburger-layer-color: #000 !default;
$hamburger-layer-border-radius: 4px !default;
$hamburger-hover-opacity: .7 !default;
$hamburger-active-layer-color: $hamburger-layer-color !default;
$hamburger-active-hover-opacity: $hamburger-hover-opacity !default;

// To use CSS filters as the hover effect instead of opacity,
// set $hamburger-hover-use-filter as true and
// change the value of $hamburger-hover-filter accordingly.
$hamburger-hover-use-filter: false !default;
$hamburger-hover-filter: opacity(50%) !default;
$hamburger-active-hover-filter: $hamburger-hover-filter !default;

// Types (Remove or comment out what you donâ€™t need)
// ==================================================
$hamburger-types: (
  spin,
) !default;

// Base Hamburger (We need this)
// ==================================================
// Hamburger
// ==================================================
.hamburger {
  display: inline-block;
  overflow: visible;
  padding: $hamburger-padding-y $hamburger-padding-x;
  margin: 0;
  color: inherit;
  // Normalize (<button>)
  font: inherit;
  text-transform: none;
  background-color: transparent;
  border: 0;
  outline: none;
  transition-duration: .15s;
  transition-property: opacity, filter;
  transition-timing-function: linear;
  cursor: pointer;

  &:hover {
    @if $hamburger-hover-use-filter == true {
      filter: $hamburger-hover-filter;
    }
    @else {
      opacity: $hamburger-hover-opacity;
    }
  }

  &.is-active {
    &:hover {
      @if $hamburger-hover-use-filter == true {
        filter: $hamburger-active-hover-filter;
      }
      @else {
        opacity: $hamburger-active-hover-opacity;
      }
    }

    .hamburger-inner,
    .hamburger-inner::before,
    .hamburger-inner::after {
      background-color: $hamburger-active-layer-color;
    }
  }
}

.hamburger-box {
  position: relative;
  display: inline-block;
  width: $hamburger-layer-width;
  height: $hamburger-layer-height * 3 + $hamburger-layer-spacing * 2;
}

.hamburger-inner {
  top: 50%;
  display: block;
  margin-top: $hamburger-layer-height;

  &,
  &::before,
  &::after {
    position: absolute;
    width: $hamburger-layer-width;
    height: $hamburger-layer-height;
    background-color: $hamburger-layer-color;
    border-radius: $hamburger-layer-border-radius;
    transition-duration: .15s;
    transition-property: transform;
    transition-timing-function: ease;
  }

  &::before,
  &::after {
    content: "";
    display: block;
  }

  &::before {
    top: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
  }

  &::after {
    bottom: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
  }
}

// Hamburger types
// ==================================================
@if index($hamburger-types, spin) {
  /*
   * Spin
   */
  .hamburger--spin {
    .hamburger-inner {
      transition-duration: .22s;
      transition-timing-function: cubic-bezier(.55, .055, .675, .19);

      &::before {
        transition: top .1s .25s ease-in,
        opacity .1s ease-in;
      }

      &::after {
        transition: bottom .1s .25s ease-in,
        transform .22s cubic-bezier(.55, .055, .675, .19);
      }
    }

    &.is-active {
      .hamburger-inner {
        transform: rotate(225deg);
        transition-delay: .12s;
        transition-timing-function: cubic-bezier(.215, .61, .355, 1);

        &::before {
          top: 0;
          transition: top .1s ease-out,
          opacity .1s .12s ease-out;
          opacity: 0;
        }

        &::after {
          bottom: 0;
          transform: rotate(-90deg);
          transition: bottom .1s ease-out,
          transform .22s .12s cubic-bezier(.215, .61, .355, 1);
        }
      }
    }
  }
}

// ==================================================
// Cooking up additional types:
//
// The Sass for each hamburger type should be nested
// inside an @if directive to check whether or not
// it exists in $hamburger-types so only the CSS for
// included types are generated.
//
// e.g. hamburgers/types/_new-type.scss
//
// @if index($hamburger-types, new-type) {
//   .hamburger--new-type {
//     ...
//   }
// }
